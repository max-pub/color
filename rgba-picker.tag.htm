<htm>
	<main>
		<!-- <h1>HSLA picker</h1> -->
		<!-- <div id='hsl'></div> -->
		<div id='color'>
			<div id='hex' on-tap='copy'></div>
			<div id='dec' on-tap='copy'></div>
		</div>
		<input type="range" min="0" max="256" id="r">
		<input type="range" min="0" max="256" id="g">
		<input type="range" min="0" max="256" id="b">
		<input type="range" min="0" max="256" id="a">
	</main>
</htm>


<script>
	class {
		r = 50;
		g = 100;
		b = 200;
		a = 250;

		$onReady() {
			this.addListener('r');
			this.addListener('g');
			this.addListener('b');
			this.addListener('a');
			this.updateColor();
		}
		copy(node) {
			import('https://max.pub/lib/data.js').then(x => x.copy(node.innerHTML));
			this.$event('notification', { text: `copied\n${node.innerHTML}\nto clipboard` })
		}
		string(o = this) {
			// console.log('string', o.r, o.r.toString(16), o.g.toString(16), o.b.toString(16), o.a.toString(16))
			return '#' + o.r.toString(16) + o.g.toString(16) + o.b.toString(16) + o.a.toString(16);
		}
		string2(o = this) {
			// console.log('string2', `rgba(${o.r},${o.g},${o.b},${(o.a / 256).toFixed(2)})`)
			return `rgba(${o.r}, ${o.g}, ${o.b}, ${(o.a / 256).toFixed(2)})`
		}
		updateColor() {
			// let color = this.string();
			this.$view.Q('#color', 1).style.background = this.string2();
			this.$view.Q('#color #hex', 1).innerHTML = this.string();
			this.$view.Q('#color #dec', 1).innerHTML = this.string2();
		}
		range(typ) {
			// console.log(typ, new Array(9).fill(1).map((x, i) => ({ ...this, ...{ [typ]: i * 32 } })))
			return new Array(9).fill(1).map((x, i) => ({ ...this, ...{ [typ]: i * 32 } }));
		}
		gradient(array) {
			return array.map(x => this.string2(x)).join(',');
		}

		updateGradient(typ) {
			// console.log(typ, this.gradient(this.range(typ)), this.$view.Q('#' + typ, 1), `\nlinear-gradient(to right, ${this.gradient(this.range(typ))})`)
			// this.$view.Q('#' + typ, 1).style.background='red';
			this.$view.Q('#' + typ, 1).style.backgroundImage = `linear-gradient(to right, ${this.gradient(this.range(typ))})`;
		}

		addListener(typ) {
			this.$view.Q('#' + typ, 1).value = this[typ];
			this.updateGradient(typ);
			this.$view.Q('#' + typ, 1).addEventListener('input', event => {
				// console.log(typ, event.target.value);
				this[typ] = event.target.value*1;
				this.updateGradient('r');
				this.updateGradient('g');
				this.updateGradient('b');
				this.updateGradient('a');
				this.updateColor();
			});

		}

	}
</script>


<style>
	:host {
		display: inline-block;
		/* border: 1px solid red; */
		/* background: #222; */
		font-family: Arial, Helvetica, sans-serif;
	}

	* {
		box-sizing: border-box;
	}

	input {
		padding: 0;
		margin-top: .3rem;
		-webkit-appearance: none;
		width: 100%;
		height: 40px;
		/* background: #d3d3d3; */
		outline: none;
		border-radius: 50px;
		/* background-image: linear-gradient(to right, hsl(0, 80%, 50%), hsl(20, 80%, 50%), hsl(40, 80%, 50%), hsl(60, 80%, 50%), hsl(80, 80%, 50%), hsl(100, 80%, 50%)); */
	}


	input::-webkit-slider-thumb {
		-webkit-appearance: none;
		appearance: none;
		width: 20px;
		height: 20px;
		background: black;
		border: 3px solid white;
		/* background-image: radial-gradient(circle, black, transparent); */
		border-radius: 100px;
		cursor: pointer;
	}

	#r::-webkit-slider-thumb {
		background: red;
	}

	#g::-webkit-slider-thumb {
		background: green;
	}

	#b::-webkit-slider-thumb {
		background: blue;
	}

	input:hover::-webkit-slider-thumb {
		/* border-color: black; */
		/* background: white; */
	}

	input::-moz-range-thumb {
		width: 20px;
		height: 20px;
		background: black;
		cursor: pointer;
		border: 3px solid white;
		border-radius: 100px;
	}


	#r::-moz-range-thumb {
		background: red;
	}


	#g::-moz-range-thumb {
		background: green;
	}


	#b::-moz-range-thumb {
		background: blue;
	}



	:focus,
	:active,
	::-moz-focus-inner,
	::-moz-focus-outer,
	:-moz-focusring {
		border: 0 !important;
		outline: none !important;
		/* -moz-outline-style: none !important; */
		color: transparent;
	}


	#color {
		width: 100%;
		height: 200px;
		/* line-height: 50px; */
		font-size: 30px;
		border-radius: 10px;
		text-align: center;
		cursor: pointer;
	}

	#color>div {
		padding: 30px
	}

	#color>div:hover {
		color: black;
	}

	h1 {
		text-align: center;
	}
</style>